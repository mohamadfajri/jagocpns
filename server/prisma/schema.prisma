// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  profile      Profile?
  scores       Score[]
  balance      Balance?
  transactions Transaction[]
  payments     Payment[]
  paidLists    PaidList[]
  ownerships   Ownership[]
  freeForms    FreeForm[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Questioner {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  name      String
  province  String
  phone     String
  gender    Gender
  instance  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model PaidList {
  id           Int        @id @default(autoincrement())
  userId       Int
  tryoutListId Int
  user         User       @relation(fields: [userId], references: [id])
  tryoutList   TryoutList @relation(fields: [tryoutListId], references: [id],onDelete: Cascade)

  @@unique([userId, tryoutListId])
}

model TryoutList {
  id          Int         @id @default(autoincrement())
  title       String
  price       BigInt
  imageUrl    String
  description String
  status      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tryouts     Tryout[]
  scores      Score[]
  payments    Payment[]
  paidLists   PaidList[]
  ownerships  Ownership[]
}

model Tryout {
  id               Int        @id @default(autoincrement())
  tryoutListId     Int
  type             String
  number           Int
  question         String?
  scoreA           Int
  scoreB           Int
  scoreC           Int
  scoreD           Int
  scoreE           Int
  explanation      String
  imageExplanation String?
  imageUrl         String?
  optionA          String?
  imageA           String?
  optionB          String?
  imageB           String?
  optionC          String?
  imageC           String?
  optionD          String?
  imageD           String?
  optionE          String?
  imageE           String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  tryoutList       TryoutList @relation(fields: [tryoutListId], references: [id], onDelete: Cascade)
}

model Score {
  id           Int        @id @default(autoincrement())
  userId       Int
  tryoutListId Int
  tiu          Int
  twk          Int
  tkp          Int
  total        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  tryoutList   TryoutList @relation(fields: [tryoutListId], references: [id],onDelete: Cascade)

  @@unique([userId, tryoutListId])
}

model Balance {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  adminId   Int?
  amount    BigInt   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id        Int               @id @default(autoincrement())
  userId    Int
  amount    BigInt
  status    TransactionStatus @default(unpaid)
  imageUrl  String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
}

model Payment {
  id           Int        @id @default(autoincrement())
  userId       Int
  tryoutListId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  tryoutList   TryoutList @relation(fields: [tryoutListId], references: [id],onDelete: Cascade)
}

model Information {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  imageUrl    String?
  type        InformationType
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Answer {
  id           Int    @id @default(autoincrement())
  tryoutListId Int
  number       Int
  userId       Int
  answer       String

  @@unique([userId, tryoutListId, number])
}

model Ownership {
  id           Int        @id @default(autoincrement())
  userId       Int
  tryoutListId Int
  isDone       Boolean    @default(false)
  user         User       @relation(fields: [userId], references: [id])
  tryoutList   TryoutList @relation(fields: [tryoutListId], references: [id], onDelete: Cascade)
}

model FreeForm {
  id           Int  @id @default(autoincrement())
  userId       Int
  tryoutListId Int
  user         User @relation(fields: [userId], references: [id])
}

model Links {
  id  Int @id @default(autoincrement())
  url String
  title String
  imageUrl String
}

enum InformationType {
  banner
  info
  news
}

enum TransactionStatus {
  unpaid
  checking
  paid
}

enum Gender {
  male
  female
}
